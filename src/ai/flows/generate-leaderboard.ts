
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Dynamically generates a leaderboard based on game data, adjusting for difficulty and performance.
 *
 * - generateLeaderboard - A function to generate the leaderboard.
 * - GenerateLeaderboardInput - The input type for the generateLeaderboard function.
 * - GenerateLeaderboardOutput - The return type for the generateLeaderboard function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PlayerStatsSchema = z.object({
  clicks: z.number().describe('Number of successful clicks.'),
  misses: z.number().describe('Number of missed clicks.'),
});

const GenerateLeaderboardInputSchema = z.object({
  gameName: z.string().describe('The name of the game.'),
  playerStats: z.record(z.string(), PlayerStatsSchema).describe('A map of player IDs to their game statistics, including clicks and misses.'),
  difficultyLevel: z.number().describe('The difficulty level of the game (e.g., 1-10).'),
});
export type GenerateLeaderboardInput = z.infer<typeof GenerateLeaderboardInputSchema>;

const GenerateLeaderboardOutputSchema = z.object({
  leaderboard: z.array(
    z.object({
      playerId: z.string().describe('The ID of the player.'),
      score: z.number().describe('The calculated score of the player.'),
      rank: z.number().describe('The rank of the player on the leaderboard.'),
    })
  ).describe('The dynamically generated leaderboard.'),
});
export type GenerateLeaderboardOutput = z.infer<typeof GenerateLeaderboardOutputSchema>;

export async function generateLeaderboard(input: GenerateLeaderboardInput): Promise<GenerateLeaderboardOutput> {
  return generateLeaderboardFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateLeaderboardPrompt',
  input: {schema: GenerateLeaderboardInputSchema},
  output: {schema: GenerateLeaderboardOutputSchema},
  prompt: `You are an AI expert in generating leaderboards for games.

  Given the following game name, player statistics, and difficulty level, generate a leaderboard that fairly ranks players.
  Your scoring model should reward players for 'clicks' and penalize them for 'misses'. The penalty for misses should be more severe at higher difficulty levels.
  
  Game Name: {{{gameName}}}
  Player Statistics: {{json playerStats}}
  Difficulty Level: {{{difficultyLevel}}}

  Ensure that the leaderboard includes the player ID, calculated score, and rank for each player.
  The final leaderboard should be sorted by score in descending order.
  `,
});

const generateLeaderboardFlow = ai.defineFlow(
  {
    name: 'generateLeaderboardFlow',
    inputSchema: GenerateLeaderboardInputSchema,
    outputSchema: GenerateLeaderboardOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error('Failed to generate leaderboard from AI.');
    }

    // Ensure ranks are sequential and correct after sorting
    const sortedLeaderboard = output.leaderboard
      .sort((a, b) => b.score - a.score)
      .map((player, index) => ({ ...player, rank: index + 1 }));

    return { leaderboard: sortedLeaderboard };
  }
);
